----------------------------------------------------------
1. ARROW FUNCTION
********app.js


//// declaration function
// 	function logger(log){
// 		console.log(log);
// 	}

//// 	experssion function
// 	const logger = function(log){
// 		console.log(log);
// 	}

//// 	anonymous function/ arrow function
// 	const logger = (log) => {
// 		console.log(log);
// 	}

//// cách viết ngắn gọn hơn: khi đằng sau dấu => không có dấu {} 
//// thì nó hiểu là return
// Ví dụ:
// 	const sum = (a,b) => a+b;
// 	console.log(sum(2,2));

//// nếu muốn return ra một object theo cách viết ngắn gọn:

// 	const sum = (a,b) => ({
//	 	a:a,
//	 	b:b
// 	})

// 	logger('Message......');

//// arrow function không có context => không hiểu được this.
/// không tin cứ thử đi xem :))
// 	const course = {
// 		name: 'JavaScript basic!',
//		getName: function(){
// 		 	return this; // context
// 	 	}
// 	}

//	console.log(course.getName);

---------------------------------------------------------
--------------------------------------------------------------
2. Enhanced object literals
// 	1. Định nghĩa key: value cho cho object
//	2. Định nghĩa method cho object

var name = 'JavaScript';
var price = 1000;

//// key và value giống nhau, thì có thể viết ngắn gọn
//// có thể bỏ :function() thay bằng () khi định nghĩa method cho ngắn gọn
//	var course = {
//		name,
//		price,
//		getName(){
//			return name;
//		}
//	}

//	3. Định nghĩa key cho object dưới dạng biến
// áp dụng cho trường hợp tùy vào giá trị của biến mà set key cho phù hợp
// cách này không sử dụng thường xuyên nhưng vẫn cần ghi nhớ
var fieldName = 'name';
var fieldPrice = 'price';

const course = {
	[fieldName]:'JavaScript',
	[fieldPrice]: 1000
};

console.log(course);

----------------------------------------------------------------------
------------------------------------------------------------------------
3. Destructuring, Rest
var array = ['JavaScript', 'PHP', 'Ruby'];

//// giả sử muốn lấy a,b,c tương ứng với từng phần tử trong mảng
//// cách thông thường
//	var a = array[0];
//	var b = array[1];
//	var c = array[2];

//// desctructuring
var [a,b,c] = array;
//	console.log(a,b,c);

//// giả sử chỉ muốn lấy a và c
//	var [a,,c] = array;
//	console.log(a,c);

//// giả sử chỉ muốn lấy a, thì sử dụng toán tử rest 
//	var [a,...rest] = array; // rest chỉ là tên biến, đặt là gì cững được
//	console.log(a);
//	console.log(rest);

//// với object
var course = {
	name: 'JavaScript',
	price: 1000,
	image: 'image-address',
	//	children: {
	//		name: 'ReactJS'
	//	}
}

//// giả sử muốn lấy ra từng field trong object
//	var {name, price, image} = course;
//	console.log(name,price, image);

//// giả sử chỉ muốn lấy field name của object
//	var {name, ...rest} = course;
//	console.log(name);
//	console.log(rest);

//// giả sử lấy name của children
//	var {name: parrentName, children: {name: childrenName} } = course;
//	console.log(parrentName);
//	console.log(childrenName);

//// giả sử muốn lấy ra một field không có trong object

//	var {name, description = 'default value'} = course;
//	console.log(name);
//	console.log(description);

//// DEMO cho REST parametter
//	function logger(...params){
//		console.log(params);	
//	}

//	logger(1,2,3,4,5,6,7,8);

===> Khi toán tử ba chấm (...) kết hợp với destructuring hoặc là
parametter (tham số của method) thì nó là REST
Note: REST chỉ lấy phần còn lại của đối tượng hoặc array
Ví dụ:
//// lấy phần còn lại của mảng
//	function logger(a,b,...rest){
//		console.log(a);
//		console.log(b);
//		console.log(rest);
//	}
//	logger([1,2,3,4]);

//// lấy phần còn lại của đối tượng
//	function logger({name, price, ...rest}){
//		console.log(name);
//		console.log(price);
//		console.log(rest);
//	}
//	logger({
//		name: 'JavaScript',
//		price: 1000,
//		description: 'Description content'
//	})

-------------------------------------------------------------------
------------------------------------------------------------------
4. SPREAD OPERATOR
+ Nối 2 mảng hay 2 đối tượng, hoặc nối thêm field của object
Ví dụ:
//	var array1 = ['JavaScript','Ruby','PHP'];
//	var array2 = ['ReactJS','Dart'];

//// giả sử cần nối 2 mảng array2 và array1
//	var array3 = [...array2,...array1]; 
//	console.log(array3);

//// giả sử cần nối 2 object
//	var object1 = {
		name: 'JavaScript'
//	};

//	var object2 = {
//		price: 1000
//	};

//	 var object3 = {
//		...object1,
//		...object2
//	};

//	console.log(object3);


///// Ví dụ cho cần call api từ nhiều trang
// var defaultConfig = {
//		api: 'https://domain-trang-khoa-hoc',
//		apiVersion: 'v1',
//		other: 'other'
//	};

//	var exerciseConfig = {
//		defaultConfig,
//		api: 'https://domain-trang-bai-tap'
//	};
//	console.log(exerciseConfig);
Note: khi toán tử 3 chấm làm nhiệm vụ là đối số truyền vào 
thì nó là Spread operator
Ví dụ:
//	var array = ['JavaScript', 'PHP', 'Ruby', 'React'];

//	function logger(...rest){
//		for(var i = 0; i < rest.length; i++){
//			console.log(rest[i]);
//		}
//	}

//	logger(...array);