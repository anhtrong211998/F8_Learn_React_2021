-----------------------------------------------------------
1. useEffect:
- Dùng khi muôn thực hiện side effects (khi có tác động xảy ra 
=> dữ liệu chương trình thay đổi)
- UPDATE DOM, Call API, Cleanup (remove listener/ unsubscribe)

- cú pháp useEffect(callback, [deps])
- callback luôn được gọi sau khi component mounted
- clean up function (return) luôn được gọi trước khi component unmounted
VD: 
//
// TH1: useEffect(callback) thì được gọi mỗi khi component re-render,
//	- Gọi callback sau khi component  thêm element vào DOM
//=> ít dùng trong thực tế hơn	
import Content from './Content'

function App(){
	const [show, setShow] = useState(false);
	
	return (
		<div style={{padding: 20}}>
			<button onClick={() => setShow(!show)}>Toggle</button>
			{show && <Content />}
		</div>
	)
}
---------------------------------------------
import {useEffect, useState} from 'react';

function Conten(){
	const [title, setTitle] = useState('');
	
	useEffect(()=>{
		console.log('Mounted');
	})
	
	return (
		<div>
			<input 
				value={title}
				onChange = {(e) => setTitle(e.target.value)}
			/>
			{console.log('render')}
		</div>
		
	)
}

VD2: TH Call API => liên tục call api
import {useEffect, useState} from 'react';

function Conten(){
	const [title, setTitle] = useState('');
	const [posts, setPosts] = useState([]);
	
	useEffect(()=>{
		fetch('https://jsonplaceholder.typicode.com/posts')
			.then(res => res.json())
			.then(posts => setPosts(posts))
	})
	
	return (
		<div>
			<input 
				value={title}
				onChange = {(e) => setTitle(e.target.value)}
			/>
			<ul>
				{posts.map(post => (
					<li key={post.id}>post.title</li>
				))}
				
			</ul>
		</div>
		
	)
}

-----------------------------------------------------------------
TH2: useEffect(callback,[])

- Chỉ gọi một lần sau khi component mounted, không gọi lại mỗi khi
component re-render
- Sử dụng logic nào đó 1 lần duy nhất

VD:
import {useEffect, useState} from 'react';

function Conten(){
	const [title, setTitle] = useState('');
	const [posts, setPosts] = useState([]);
	
	useEffect(()=>{
		fetch('https://jsonplaceholder.typicode.com/posts')
			.then(res => res.json())
			.then(posts => setPosts(posts))
	},[])
	
	return (
		<div>
			<input 
				value={title}
				onChange = {(e) => setTitle(e.target.value)}
			/>
			<ul>
				{posts.map(post => (
					<li key={post.id}>post.title</li>
				))}
				
			</ul>
		</div>
		
	)
}

---------------------------------------------------------------------
------------------------------------------------------------------------
TH3: useEffect(callback,[deps])
- Callback sẽ được gọi lại mỗi khi deps thay đổi

VD: 
import {useEffect, useState} from 'react';

const tabs = ['posts','comments','albums']

function Conten(){
	const [title, setTitle] = useState('');
	const [posts, setPosts] = useState([]);
	const [type, setType] = useState('posts');
	
	useEffect(()=>{
		fetch(`https://jsonplaceholder.typicode.com/${type}`)
			.then(res => res.json())
			.then(datas => setPosts(datas))
	},[type])
	
	return (
		<div>
			{tabs.map((tab) => (
				<button 
					key={tab}
					style={type === tab ? {
						color:'#fff', 
						backgroundColer: '#333'
						} : {}}
					onClick={() => setType(tab)}
				> 
					{tab} 
				</button>
			))}
			<input 
				value={title}
				onChange = {(e) => setTitle(e.target.value)}
			/>
			<ul>
				{posts.map(post => (
					<li key={post.id}>{post.title || post.name}</li>
				))}
				
			</ul>
		</div>
		
	)
}

--------------------------------------------------------------------
--------------------------------------------------------------------
2 useEffect with DOM events
VD: 
import {useEffect, useState} from 'react';

const tabs = ['posts','comments','albums']

function Conten(){
	const [title, setTitle] = useState('');
	const [posts, setPosts] = useState([]);
	const [type, setType] = useState('posts');
	const [showGoTop, setShowGoTop] = useState(false);
	
	useEffect(()=>{
		fetch(`https://jsonplaceholder.typicode.com/${type}`)
			.then(res => res.json())
			.then(datas => setPosts(datas))
	},[type])
	
	useEffect(() => {
		if(window.scrollY >= 200){
			setShowGoTop(true);
		}else{
			setShowGoTop(false);
		}
		
		window.addEventListener('scroll', handleScroll);
		
		// cleanup function: dọn dẹp bộ nhớ khi unmounted
		return () => {
			window.removeEventListener('scroll', handleScroll);
		}
	},[])
	
	return (
		<div>
			{tabs.map((tab) => (
				<button 
					key={tab}
					style={type === tab ? {
						color:'#fff', 
						backgroundColer: '#333'
						} : {}}
					onClick={() => setType(tab)}
				> 
					{tab} 
				</button>
			))}
			<input 
				value={title}
				onChange = {(e) => setTitle(e.target.value)}
			/>
			<ul>
				{posts.map(post => (
					<li key={post.id}>{post.title || post.name}</li>
				))}
				
			</ul>
			{showGoTop && (
				<button
					style={{
						position: 'fixed',
						right:20,
						bottom:20
					}}
				>
				Go to Top
				</button>
			)}
		</div>
		
	)
}